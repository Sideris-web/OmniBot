import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import openai

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ API-–∫–ª—é—á—ñ –∑ –æ—Ç–æ—á–µ–Ω–Ω—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ OpenAI API
openai.api_key = OPENAI_API_KEY

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø OmniBot ü§ñ. –ó–∞–ø–∏—Ç–∞–π –º–µ–Ω–µ —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ!")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message_handler()
async def chat_with_gpt(message: types.Message):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": message.text}]
        )
        reply = response["choices"][0]["message"]["content"]
        await message.reply(reply)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ OpenAI API: {e}")
        await message.reply("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
