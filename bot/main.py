import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import openai

# üî• –í–°–¢–ê–ù–û–í–õ–Æ–Ñ–ú–û –ö–õ–Æ–ß–Ü –ù–ê–ü–†–Ø–ú–£
TELEGRAM_BOT_TOKEN = "7858075515:AAHkJvKomSWgS6V4-qx4b76dCW04IcOYutE"
OPENAI_API_KEY = "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"
OPENAI_ORG = "org-aljpAbtAOS2HOA91HxWLPd5f"
OPENAI_PROJECT = "proj_kIBGPch0Rb1S16SEVGmKP9jf"

# üî• –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ OpenAI Projects API (–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º URL —ñ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏)
client = openai.OpenAI(
    api_key=OPENAI_API_KEY,
    base_url="https://api.openai.com/v1",
    headers={
        "OpenAI-Organization": OPENAI_ORG,
        "OpenAI-Project": OPENAI_PROJECT,
    }
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø OmniBot ü§ñ. –ó–∞–ø–∏—Ç–∞–π –º–µ–Ω–µ —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ!")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message_handler()
async def chat_with_gpt(message: types.Message):
    try:
        response = client.chat.completions.create(
            model="gpt-4o-2024-11-20",  # ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
            messages=[{"role": "user", "content": message.text}]
        )
        reply = response.choices[0].message.content
        await message.reply(reply)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ OpenAI API: {e}")
        await message.reply("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
