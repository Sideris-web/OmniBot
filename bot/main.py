import logging
import requests
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# üî• –í–°–¢–ê–ù–û–í–õ–Æ–Ñ–ú–û –ö–õ–Æ–ß–Ü –ù–ê–ü–†–Ø–ú–£ –î–õ–Ø TELEGRAM
TELEGRAM_BOT_TOKEN = "7858075515:AAHkJvKomSWgS6V4-qx4b76dCW04IcOYutE"  # üî• –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_PROJECT = os.getenv("OPENAI_PROJECT", "proj_kIBGPch0Rb1S16SEVGmKP9jf")

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ
if not OPENAI_API_KEY:
    raise ValueError("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π OPENAI_API_KEY. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ!")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø OmniBot ü§ñ. –ó–∞–ø–∏—Ç–∞–π –º–µ–Ω–µ —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ!")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message_handler()
async def chat_with_gpt(message: types.Message):
    try:
        headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json",
            "OpenAI-Project": OPENAI_PROJECT
        }

        data = {
            "model": "gpt-4o-2024-11-20",  # ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
            "messages": [{"role": "user", "content": message.text}],
            "temperature": 0.7
        }

        response = requests.post(
            "https://api.openai.com/v1/chat/completions", 
            headers=headers, 
            json=data  # üî• –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ json= –∑–∞–º—ñ—Å—Ç—å data=json.dumps(data) (–∫—Ä–∞—â–µ!)
        )

        if response.status_code == 200:
            reply = response.json()["choices"][0]["message"]["content"]
            await message.reply(reply)
        else:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI API: {response.status_code}, {response.text}")
            await message.reply("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ OpenAI API. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI API: {e}")
        await message.reply("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
